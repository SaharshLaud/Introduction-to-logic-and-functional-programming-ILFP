Assignment 7: A Toy Prolog Interpreter

You have previously implemented terms, substitutions and unification. 

You have also implemented a Propositional Resolution Engine with back-tracking.

Now, you should be able to combine these in a modular fashion (replacing parts of your code with other earlier written code).

In this assignment, you will write a simplified version of a Prolog interpreter in OCaml.

You will first define an OCamL data type to represent the abstract structure of a legitimate Prolog program (you may first assume that the ASTs will be well-formed to get your interpreter working, then later ensure that they indeed are)

A program is a set (list) of clauses. 
 A clause can either be a fact or a rule. A fact has a head but no body.  A rule has a head and a body.  
The head is a single atomic formula.  A body is a sequence of atomic formulas.
An atomic formula is a k-ary predicate symbol followed by k terms.
A term is either a variable, a constant, or a k-ary function symbol with k subterms.
A goal is a sequence of atomic formulas.
You need to take your implementation of unification and use it as the parameter-passing mechanism. (Note: by pretending the predicate symbol is a function symbol, you can perform resolution of goals and program clauses).

You also need to modify your back-tracking strategy to explore the resolution search space (reverting to an older substitution).   You need to be able to replace a goal by subgoals, as found by applying a unifier to the body of a program clause whose head unified with the chosen subgoal.

Test your toy interpreter out on your Prolog program.   For that you may quickly write a translator from Prolog syntax to the data type for ASTs defined above. 

